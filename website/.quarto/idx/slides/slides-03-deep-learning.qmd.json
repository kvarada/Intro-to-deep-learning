{"title":"Deep Learning","markdown":{"yaml":{"title":"Deep Learning","format":{"revealjs":{"smaller":true,"center":true}}},"headingText":"Learning outcomes","containsRefs":false,"markdown":"\n\n```{python}\nimport mglearn\nimport json\nimport numpy as np\nimport pandas as pd\nimport sys, os\nsys.path.append(os.path.join(os.path.abspath(\".\"), \"code\"))\nfrom deep_learning_code import *\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\nfrom torchvision import datasets, models, transforms, utils\nfrom sklearn.pipeline import Pipeline, make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.image as mpimg\n%matplotlib inline\n```\n\n\\\nFrom this module, you will be able to \n\n- Explain the role of neural networks in machine learning, including their advantages and disadvantages.\n- Discuss why traditional methods are less effective for image data.\n- Gain a high-level understanding of transfer learning.\n- Use transfer learning for your own tasks. \n- Differentiate between image classification and object detection.\n\n\n## Image classification\n\\\n\nHave you used search in Google Photos? You can search for \"my photos of cat\" and it will retrieve photos from your libraries containing cats.\nThis can be done using **image classification**, which is treated as a supervised learning problem, where we define a set of target classes (objects to identify in images), and train a model to recognize them using labeled example photos.\n\n## Image classification\n\\\n\nImage classification is not an easy problem because of the variations in the location of the object, lighting, background, camera angle, camera focus etc.\n\n![](img/cat_variation.png)\n<!-- [Source](https://developers.google.com/machine-learning/practica/image-classification) -->\n\n## Neural networks\n\\\n\n- Neural networks are perfect for these types of problems where local structures are important. \n- A significant advancement in image classification was the application of **convolutional neural networks** (ConvNets or CNNs) to this problem. \n  - [ImageNet Classification with Deep Convolutional\nNeural Networks](https://dl.acm.org/doi/10.1145/3065386)\n  - Achieved a winning test error rate of 15.3%, compared to 26.2% achieved by the second-best entry in the ILSVRC-2012 competition. \n- Let's go over the basics of a neural network.\n\n## Introduction to neural networks\n\\\n\n- Neural networks can be viewed a generalization of linear models where we apply a series of transformations.\n- Here is graphical representation of a logistic regression model.\n- We have 4 features: x[0], x[1], x[2], x[3]\n\n```{python}\nimport mglearn\n\nmglearn.plots.plot_logistic_regression_graph()\n```\n\n## Adding a layer of transformations \n\\\n\n- Below we are adding one \"layer\" of transformations in between features and the target. \n- We are repeating the the process of computing the weighted sum multiple times.  \n- The **hidden units** (e.g., h[1], h[2], ...) represent the intermediate processing steps. \n\n```{python}\nmglearn.plots.plot_single_hidden_layer_graph()\n```\n\n## One more layer of transformations \n\\\n\n- Now we are adding one more layer of transformations. \n\n```{python}\nmglearn.plots.plot_two_hidden_layer_graph()\n```\n\n## Neural networks \n\\\n\n- With a neural net, you specify the number of features after each transformation.\n  - In the above, it goes from 4 to 3 to 3 to 1.\n\n- To make them really powerful compared to the linear models, we apply a non-linear function to the weighted sum for each hidden node. \n- Neural network = neural net\n- Deep learning ~ using neural networks\n\n## Why neural networks?\n\\\n\n- They can learn very complex functions.\n  - The fundamental tradeoff is primarily controlled by the **number of layers** and **layer sizes**.\n  - More layers / bigger layers --> more complex model.\n  - You can generally get a model that will not underfit. \n\n- They work really well for structured data:\n  - 1D sequence, e.g. timeseries, language\n  - 2D image\n  - 3D image or video\n- They've had some incredible successes in the last 12 years.\n- Transfer learning (coming later today) is really useful.  \n\n## Why not neural networks?\n\\\n\n- Often they require a lot of data.\n- They require a lot of compute time, and, to be faster, specialized hardware called [GPUs](https://en.wikipedia.org/wiki/Graphics_processing_unit).\n- They have huge numbers of hyperparameters\n  - Think of each layer having hyperparameters, plus some overall hyperparameters.\n  - Being slow compounds this problem.\n- They are not interpretable.\n- I don't recommend training them on your own without further training\n- Good news\n    - You don't have to train your models from scratch in order to use them.\n    - I'll show you some ways to use neural networks without training them yourselves. \n\n## Deep learning software\n\\\n\nThe current big players are:\n\n1. [PyTorch](http://pytorch.org)\n2. [TensorFlow](https://www.tensorflow.org)\n\nBoth are heavily used in industry. If interested, see [comparison of deep learning software](https://en.wikipedia.org/wiki/Comparison_of_deep_learning_software).\n\n<br><br>\n\n## Introduction to computer vision\n\\\n\n- [Computer vision](https://en.wikipedia.org/wiki/Computer_vision) refers to understanding images/videos, usually using ML/AI. \n- In the last decade this field has been dominated by deep learning. We will explore **image classification** and **object detection**.\n\n## Introduction to computer vision\n\\\n\n- image classification: is this a cat or a dog?\n- object localization: where is the cat in this image?\n- object detection: What are the various objects in the image? \n- instance segmentation: What are the shapes of these various objects in the image? \n- and much more...\n\n![](img/vision-apps.jpeg)\n<!-- Source: https://learning.oreilly.com/library/view/python-advanced-guide/9781789957211/--> \n\n\n## Pre-trained models\n\\\n\n- In practice, very few people train an entire CNN from scratch because it requires a large dataset, powerful computers, and a huge amount of human effort to train the model.\n- Instead, a common practice is to download a pre-trained model and fine tune it for your task. This is called **transfer learning**.\n- Transfer learning is one of the most common techniques used in the context of computer vision and natural language processing.\n- It refers to using a model already trained on one task as a starting point for learning to perform another task.\n\n## Pre-trained models out-of-the-box \n\\\n\n![](img/cnn-ex.png)\n\n<!-- Source: https://cezannec.github.io/Convolutional_Neural_Networks/ -->\n\n- Let's first apply one of these pre-trained models to our own problem right out of the box. \n\n\n## Pre-trained models out-of-the-box \n\\\n\n- We can easily download famous models using the `torchvision.models` module. All models are available with pre-trained weights (based on ImageNet's 224 x 224 images)\n- We used a pre-trained model vgg16 which is trained on the ImageNet data. \n- We preprocess the given image. \n- We get prediction from this pre-trained model on a given image along with prediction probabilities.  \n- For a given image, this model will spit out one of the 1000 classes from ImageNet. \n\n## Pre-trained models out-of-the-box {.scrollable}\n\n- Let's predict labels with associated probabilities for unseen images\n\n::: {.scroll-container style=\"overflow-y: scroll; height: 400px;\"}\n```{python}\nimport glob\nimport matplotlib.pyplot as plt\nimages = glob.glob(\"data/test_images/*.*\")\nplt.figure(figsize=(5, 5));\nfor image in images:\n    img = Image.open(image)\n    img.load()\n    \n    plt.imshow(img)\n    plt.show()\n    df = classify_image(img)\n    print(df.to_string(index=False))\n    print(\"--------------------------------------------------------------\")\n```\n:::\n\n\n## Pre-trained models out-of-the-box \n\\\n\n- We got these predictions without \"doing the ML ourselves\".\n- We are using **pre-trained** `vgg16` model which is available in `torchvision`.\n  - `torchvision` has many such pre-trained models available that have been very successful across a wide range of tasks: AlexNet, VGG, ResNet, Inception, MobileNet, etc.\n- Many of these models have been pre-trained on famous datasets like **ImageNet**. \n- So if we use them out-of-the-box, they will give us one of the ImageNet classes as classification. \n\n## Pre-trained models out-of-the-box {.smaller}\n\\\n\n- Let's try some images which are unlikely to be there in ImageNet. \n- It's not doing very well here because ImageNet doesn't have proper classes for these images.\n\n::: {.scroll-container style=\"overflow-y: scroll; height: 400px;\"}\n```{python}\n# Predict labels with associated probabilities for unseen images\nimages = glob.glob(\"data/random_img/*.*\")\nfor image in images:\n    img = Image.open(image)\n    img.load()\n    plt.imshow(img)\n    plt.show()\n    df = classify_image(img)    \n    print(df.to_string(index=False))\n    print(\"--------------------------------------------------------------\")\n```\n:::\n\n## Pre-trained models out-of-the-box\n\\\n\n- Here we are using pre-trained models out-of-the-box. \n- Can we use pre-trained models for our own classification problem with our classes? \n- Yes!! We have two options here:\n    1. Add some extra layers to the pre-trained network to suit our particular task\n    2. Pass training data through the network and save the output to use as features for training some other model\n\n\n## Pre-trained models to extract features \n\\\n\n- Let's use pre-trained models to extract features.\n- We will pass our specific data through a pre-trained network to get a feature vector for each example in the data. \n- The feature vector is usually extracted from the last layer, before the classification layer from the pre-trained network. \n- You can think of each layer a transformer applying some transformations on the input received to that later. \n\n![](img/cnn-ex.png)\n\n\n## Pre-trained models to extract features \n\\\n\n- Once we extract these feature vectors for all images in our training data, we can train a machine learning classifier such as logistic regression or random forest. \n- This classifier will be trained on our classes using feature representations extracted from the pre-trained models.  \n- Let's try this out. \n- It's better to train such models with GPU. Since our dataset is quite small, we won't have problems running it on a CPU. \n\n## Pre-trained models to extract features \n\\\n\nLet's look at some sample images in the dataset. \n\n::: {.scroll-container style=\"overflow-y: scroll; height: 400px;\"}\n```{python}\n    data_dir = 'data/food/'\n    image_datasets, dataloaders = read_data(data_dir)\n    dataset_sizes = {x: len(image_datasets[x]) for x in [\"train\", \"valid\"]}\n    class_names = image_datasets[\"train\"].classes\n    inputs, classes = next(iter(dataloaders[\"valid\"]))\n    plt.figure(figsize=(10, 8)); plt.axis(\"off\"); plt.title(\"Sample valid Images\")\n    plt.imshow(np.transpose(utils.make_grid(inputs, padding=1, normalize=True),(1, 2, 0)));\n```\n:::\n\n## Dataset statistics\n\\\n\nHere is the stat of our toy dataset. \n\n```{python}\n    print(f\"Classes: {image_datasets['train'].classes}\")\n    print(f\"Class count: {image_datasets['train'].targets.count(0)}, {image_datasets['train'].targets.count(1)}, {image_datasets['train'].targets.count(2)}\")\n    print(f\"Samples:\", len(image_datasets[\"train\"]))\n    print(f\"First sample: {image_datasets['train'].samples[0]}\")\n```\n\n\n## Pre-trained models to extract features \n\\\n\n- Now for each image in our dataset, we'll extract a feature vector from a pre-trained model called densenet121, which is trained on the ImageNet dataset.  \n\n```{python}\ndensenet = models.densenet121(weights=\"DenseNet121_Weights.IMAGENET1K_V1\")\ndensenet.classifier = nn.Identity()  # remove that last \"classification\" layer\nZ_train, y_train, Z_valid, y_valid = get_features(\n    densenet, dataloaders[\"train\"], dataloaders[\"valid\"]\n)\n```\n\n## Shape of the feature vector\n\\\n\n- Now we have extracted feature vectors for all examples. What's the shape of these features?\n\n```{python}\nZ_train.shape\n```\n\n- The size of each feature vector is 1024 because the size of the last layer in densenet architecture is 1024.  \n\n![](img/densenet-architecture.png)\n\n[Source](https://towardsdatascience.com/understanding-and-visualizing-densenets-7f688092391a)\n\n## A feature vector given by densenet \n\\ \n\n- Let's examine the feature vectors. \n\n```{python}\npd.DataFrame(Z_train).head()\n```\n- The features are hard to interpret but they have some important information about the images which can be useful for classification.  \n\n## Logistic regression with the extracted features \n\\\n\n- Let's try out logistic regression on these extracted features. \n\n```{python}\npipe = make_pipeline(StandardScaler(), LogisticRegression(max_iter=2000))\npipe.fit(Z_train, y_train)\nprint(\"Training score: \", pipe.score(Z_train, y_train))\n```\n\n```{python}\npipe.score(Z_valid, y_valid)\nprint(\"Validation score: \", pipe.score(Z_valid, y_valid))\n```\n\n- This is great accuracy for so little data and little effort!!!\n\n\n## Sample predictions\n\\\n\nLet's examine some sample predictions on the validation set.  \n\n::: {.scroll-container style=\"overflow-y: scroll; height: 400px;\"}\n```{python}\n# Show predictions for 25 images in the validation set (5 rows of 5 images)\nshow_predictions(pipe, Z_valid, y_valid, dataloaders['valid'], class_names, num_images=40)\n```\n:::\n\n\n## Object detection \n\\\n\n- Another useful task and tool to know is object detection using YOLO model. \n- Let's identify objects in a sample image using a pretrained model called YOLO8. \n- List the objects present in this image.\n\n![](data/yolo_test/3356700488_183566145b.jpg)\n\n## Object detection using [YOLO](https://docs.ultralytics.com/)\n\\\n\nLet's try this out using a pre-trained model. \n\n\n```{python}\n#| echo: true\nfrom ultralytics import YOLO\nmodel = YOLO(\"yolov8n.pt\")  # pretrained YOLOv8n model\n\nyolo_input = \"data/yolo_test/3356700488_183566145b.jpg\"\nyolo_result = \"data/yolo_result.jpg\"\n# Run batched inference on a list of images\nresult = model(yolo_input)  # return a list of Results objects\nresult[0].save(filename=yolo_result)\n```\n\n## Object detection output \n\\\n\n::: {.scroll-container style=\"overflow-y: scroll; height: 400px;\"}\n```{python}\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\n# Load the images\ninput_img = mpimg.imread(yolo_input)\nresult_img = mpimg.imread(yolo_result)\n\n# Create a figure to display the images side by side\nfig, axes = plt.subplots(1, 2, figsize=(10, 5))\n\n# Display the first image\naxes[0].imshow(input_img)\naxes[0].axis('off')  # Hide the axes\naxes[0].set_title('Original Image')\n\n# Display the second image\naxes[1].imshow(result_img)\naxes[1].axis('off')  # Hide the axes\naxes[1].set_title('Result Image')\n\n# Show the images\nplt.tight_layout()\nplt.show()\n```\n:::\n\n\n## Summary \n\\\n\n- Neural networks are a flexible class of models.\n  - They are particular powerful for structured input like images, videos, audio, etc.\n  - They can be challenging to train and often require significant computational resources.\n- The good news is we can use pre-trained neural networks.\n  - This saves us a huge amount of time/cost/effort/resources.\n  - We can use these pre-trained networks directly or use them as feature transformers. \n\n## Thank you! \n\n- That's it for the module! Now, let's work on the hands on exercises. \n","srcMarkdownNoYaml":"\n\n```{python}\nimport mglearn\nimport json\nimport numpy as np\nimport pandas as pd\nimport sys, os\nsys.path.append(os.path.join(os.path.abspath(\".\"), \"code\"))\nfrom deep_learning_code import *\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\nfrom torchvision import datasets, models, transforms, utils\nfrom sklearn.pipeline import Pipeline, make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.image as mpimg\n%matplotlib inline\n```\n\n## Learning outcomes \n\\\nFrom this module, you will be able to \n\n- Explain the role of neural networks in machine learning, including their advantages and disadvantages.\n- Discuss why traditional methods are less effective for image data.\n- Gain a high-level understanding of transfer learning.\n- Use transfer learning for your own tasks. \n- Differentiate between image classification and object detection.\n\n\n## Image classification\n\\\n\nHave you used search in Google Photos? You can search for \"my photos of cat\" and it will retrieve photos from your libraries containing cats.\nThis can be done using **image classification**, which is treated as a supervised learning problem, where we define a set of target classes (objects to identify in images), and train a model to recognize them using labeled example photos.\n\n## Image classification\n\\\n\nImage classification is not an easy problem because of the variations in the location of the object, lighting, background, camera angle, camera focus etc.\n\n![](img/cat_variation.png)\n<!-- [Source](https://developers.google.com/machine-learning/practica/image-classification) -->\n\n## Neural networks\n\\\n\n- Neural networks are perfect for these types of problems where local structures are important. \n- A significant advancement in image classification was the application of **convolutional neural networks** (ConvNets or CNNs) to this problem. \n  - [ImageNet Classification with Deep Convolutional\nNeural Networks](https://dl.acm.org/doi/10.1145/3065386)\n  - Achieved a winning test error rate of 15.3%, compared to 26.2% achieved by the second-best entry in the ILSVRC-2012 competition. \n- Let's go over the basics of a neural network.\n\n## Introduction to neural networks\n\\\n\n- Neural networks can be viewed a generalization of linear models where we apply a series of transformations.\n- Here is graphical representation of a logistic regression model.\n- We have 4 features: x[0], x[1], x[2], x[3]\n\n```{python}\nimport mglearn\n\nmglearn.plots.plot_logistic_regression_graph()\n```\n\n## Adding a layer of transformations \n\\\n\n- Below we are adding one \"layer\" of transformations in between features and the target. \n- We are repeating the the process of computing the weighted sum multiple times.  \n- The **hidden units** (e.g., h[1], h[2], ...) represent the intermediate processing steps. \n\n```{python}\nmglearn.plots.plot_single_hidden_layer_graph()\n```\n\n## One more layer of transformations \n\\\n\n- Now we are adding one more layer of transformations. \n\n```{python}\nmglearn.plots.plot_two_hidden_layer_graph()\n```\n\n## Neural networks \n\\\n\n- With a neural net, you specify the number of features after each transformation.\n  - In the above, it goes from 4 to 3 to 3 to 1.\n\n- To make them really powerful compared to the linear models, we apply a non-linear function to the weighted sum for each hidden node. \n- Neural network = neural net\n- Deep learning ~ using neural networks\n\n## Why neural networks?\n\\\n\n- They can learn very complex functions.\n  - The fundamental tradeoff is primarily controlled by the **number of layers** and **layer sizes**.\n  - More layers / bigger layers --> more complex model.\n  - You can generally get a model that will not underfit. \n\n- They work really well for structured data:\n  - 1D sequence, e.g. timeseries, language\n  - 2D image\n  - 3D image or video\n- They've had some incredible successes in the last 12 years.\n- Transfer learning (coming later today) is really useful.  \n\n## Why not neural networks?\n\\\n\n- Often they require a lot of data.\n- They require a lot of compute time, and, to be faster, specialized hardware called [GPUs](https://en.wikipedia.org/wiki/Graphics_processing_unit).\n- They have huge numbers of hyperparameters\n  - Think of each layer having hyperparameters, plus some overall hyperparameters.\n  - Being slow compounds this problem.\n- They are not interpretable.\n- I don't recommend training them on your own without further training\n- Good news\n    - You don't have to train your models from scratch in order to use them.\n    - I'll show you some ways to use neural networks without training them yourselves. \n\n## Deep learning software\n\\\n\nThe current big players are:\n\n1. [PyTorch](http://pytorch.org)\n2. [TensorFlow](https://www.tensorflow.org)\n\nBoth are heavily used in industry. If interested, see [comparison of deep learning software](https://en.wikipedia.org/wiki/Comparison_of_deep_learning_software).\n\n<br><br>\n\n## Introduction to computer vision\n\\\n\n- [Computer vision](https://en.wikipedia.org/wiki/Computer_vision) refers to understanding images/videos, usually using ML/AI. \n- In the last decade this field has been dominated by deep learning. We will explore **image classification** and **object detection**.\n\n## Introduction to computer vision\n\\\n\n- image classification: is this a cat or a dog?\n- object localization: where is the cat in this image?\n- object detection: What are the various objects in the image? \n- instance segmentation: What are the shapes of these various objects in the image? \n- and much more...\n\n![](img/vision-apps.jpeg)\n<!-- Source: https://learning.oreilly.com/library/view/python-advanced-guide/9781789957211/--> \n\n\n## Pre-trained models\n\\\n\n- In practice, very few people train an entire CNN from scratch because it requires a large dataset, powerful computers, and a huge amount of human effort to train the model.\n- Instead, a common practice is to download a pre-trained model and fine tune it for your task. This is called **transfer learning**.\n- Transfer learning is one of the most common techniques used in the context of computer vision and natural language processing.\n- It refers to using a model already trained on one task as a starting point for learning to perform another task.\n\n## Pre-trained models out-of-the-box \n\\\n\n![](img/cnn-ex.png)\n\n<!-- Source: https://cezannec.github.io/Convolutional_Neural_Networks/ -->\n\n- Let's first apply one of these pre-trained models to our own problem right out of the box. \n\n\n## Pre-trained models out-of-the-box \n\\\n\n- We can easily download famous models using the `torchvision.models` module. All models are available with pre-trained weights (based on ImageNet's 224 x 224 images)\n- We used a pre-trained model vgg16 which is trained on the ImageNet data. \n- We preprocess the given image. \n- We get prediction from this pre-trained model on a given image along with prediction probabilities.  \n- For a given image, this model will spit out one of the 1000 classes from ImageNet. \n\n## Pre-trained models out-of-the-box {.scrollable}\n\n- Let's predict labels with associated probabilities for unseen images\n\n::: {.scroll-container style=\"overflow-y: scroll; height: 400px;\"}\n```{python}\nimport glob\nimport matplotlib.pyplot as plt\nimages = glob.glob(\"data/test_images/*.*\")\nplt.figure(figsize=(5, 5));\nfor image in images:\n    img = Image.open(image)\n    img.load()\n    \n    plt.imshow(img)\n    plt.show()\n    df = classify_image(img)\n    print(df.to_string(index=False))\n    print(\"--------------------------------------------------------------\")\n```\n:::\n\n\n## Pre-trained models out-of-the-box \n\\\n\n- We got these predictions without \"doing the ML ourselves\".\n- We are using **pre-trained** `vgg16` model which is available in `torchvision`.\n  - `torchvision` has many such pre-trained models available that have been very successful across a wide range of tasks: AlexNet, VGG, ResNet, Inception, MobileNet, etc.\n- Many of these models have been pre-trained on famous datasets like **ImageNet**. \n- So if we use them out-of-the-box, they will give us one of the ImageNet classes as classification. \n\n## Pre-trained models out-of-the-box {.smaller}\n\\\n\n- Let's try some images which are unlikely to be there in ImageNet. \n- It's not doing very well here because ImageNet doesn't have proper classes for these images.\n\n::: {.scroll-container style=\"overflow-y: scroll; height: 400px;\"}\n```{python}\n# Predict labels with associated probabilities for unseen images\nimages = glob.glob(\"data/random_img/*.*\")\nfor image in images:\n    img = Image.open(image)\n    img.load()\n    plt.imshow(img)\n    plt.show()\n    df = classify_image(img)    \n    print(df.to_string(index=False))\n    print(\"--------------------------------------------------------------\")\n```\n:::\n\n## Pre-trained models out-of-the-box\n\\\n\n- Here we are using pre-trained models out-of-the-box. \n- Can we use pre-trained models for our own classification problem with our classes? \n- Yes!! We have two options here:\n    1. Add some extra layers to the pre-trained network to suit our particular task\n    2. Pass training data through the network and save the output to use as features for training some other model\n\n\n## Pre-trained models to extract features \n\\\n\n- Let's use pre-trained models to extract features.\n- We will pass our specific data through a pre-trained network to get a feature vector for each example in the data. \n- The feature vector is usually extracted from the last layer, before the classification layer from the pre-trained network. \n- You can think of each layer a transformer applying some transformations on the input received to that later. \n\n![](img/cnn-ex.png)\n\n\n## Pre-trained models to extract features \n\\\n\n- Once we extract these feature vectors for all images in our training data, we can train a machine learning classifier such as logistic regression or random forest. \n- This classifier will be trained on our classes using feature representations extracted from the pre-trained models.  \n- Let's try this out. \n- It's better to train such models with GPU. Since our dataset is quite small, we won't have problems running it on a CPU. \n\n## Pre-trained models to extract features \n\\\n\nLet's look at some sample images in the dataset. \n\n::: {.scroll-container style=\"overflow-y: scroll; height: 400px;\"}\n```{python}\n    data_dir = 'data/food/'\n    image_datasets, dataloaders = read_data(data_dir)\n    dataset_sizes = {x: len(image_datasets[x]) for x in [\"train\", \"valid\"]}\n    class_names = image_datasets[\"train\"].classes\n    inputs, classes = next(iter(dataloaders[\"valid\"]))\n    plt.figure(figsize=(10, 8)); plt.axis(\"off\"); plt.title(\"Sample valid Images\")\n    plt.imshow(np.transpose(utils.make_grid(inputs, padding=1, normalize=True),(1, 2, 0)));\n```\n:::\n\n## Dataset statistics\n\\\n\nHere is the stat of our toy dataset. \n\n```{python}\n    print(f\"Classes: {image_datasets['train'].classes}\")\n    print(f\"Class count: {image_datasets['train'].targets.count(0)}, {image_datasets['train'].targets.count(1)}, {image_datasets['train'].targets.count(2)}\")\n    print(f\"Samples:\", len(image_datasets[\"train\"]))\n    print(f\"First sample: {image_datasets['train'].samples[0]}\")\n```\n\n\n## Pre-trained models to extract features \n\\\n\n- Now for each image in our dataset, we'll extract a feature vector from a pre-trained model called densenet121, which is trained on the ImageNet dataset.  \n\n```{python}\ndensenet = models.densenet121(weights=\"DenseNet121_Weights.IMAGENET1K_V1\")\ndensenet.classifier = nn.Identity()  # remove that last \"classification\" layer\nZ_train, y_train, Z_valid, y_valid = get_features(\n    densenet, dataloaders[\"train\"], dataloaders[\"valid\"]\n)\n```\n\n## Shape of the feature vector\n\\\n\n- Now we have extracted feature vectors for all examples. What's the shape of these features?\n\n```{python}\nZ_train.shape\n```\n\n- The size of each feature vector is 1024 because the size of the last layer in densenet architecture is 1024.  \n\n![](img/densenet-architecture.png)\n\n[Source](https://towardsdatascience.com/understanding-and-visualizing-densenets-7f688092391a)\n\n## A feature vector given by densenet \n\\ \n\n- Let's examine the feature vectors. \n\n```{python}\npd.DataFrame(Z_train).head()\n```\n- The features are hard to interpret but they have some important information about the images which can be useful for classification.  \n\n## Logistic regression with the extracted features \n\\\n\n- Let's try out logistic regression on these extracted features. \n\n```{python}\npipe = make_pipeline(StandardScaler(), LogisticRegression(max_iter=2000))\npipe.fit(Z_train, y_train)\nprint(\"Training score: \", pipe.score(Z_train, y_train))\n```\n\n```{python}\npipe.score(Z_valid, y_valid)\nprint(\"Validation score: \", pipe.score(Z_valid, y_valid))\n```\n\n- This is great accuracy for so little data and little effort!!!\n\n\n## Sample predictions\n\\\n\nLet's examine some sample predictions on the validation set.  \n\n::: {.scroll-container style=\"overflow-y: scroll; height: 400px;\"}\n```{python}\n# Show predictions for 25 images in the validation set (5 rows of 5 images)\nshow_predictions(pipe, Z_valid, y_valid, dataloaders['valid'], class_names, num_images=40)\n```\n:::\n\n\n## Object detection \n\\\n\n- Another useful task and tool to know is object detection using YOLO model. \n- Let's identify objects in a sample image using a pretrained model called YOLO8. \n- List the objects present in this image.\n\n![](data/yolo_test/3356700488_183566145b.jpg)\n\n## Object detection using [YOLO](https://docs.ultralytics.com/)\n\\\n\nLet's try this out using a pre-trained model. \n\n\n```{python}\n#| echo: true\nfrom ultralytics import YOLO\nmodel = YOLO(\"yolov8n.pt\")  # pretrained YOLOv8n model\n\nyolo_input = \"data/yolo_test/3356700488_183566145b.jpg\"\nyolo_result = \"data/yolo_result.jpg\"\n# Run batched inference on a list of images\nresult = model(yolo_input)  # return a list of Results objects\nresult[0].save(filename=yolo_result)\n```\n\n## Object detection output \n\\\n\n::: {.scroll-container style=\"overflow-y: scroll; height: 400px;\"}\n```{python}\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\n# Load the images\ninput_img = mpimg.imread(yolo_input)\nresult_img = mpimg.imread(yolo_result)\n\n# Create a figure to display the images side by side\nfig, axes = plt.subplots(1, 2, figsize=(10, 5))\n\n# Display the first image\naxes[0].imshow(input_img)\naxes[0].axis('off')  # Hide the axes\naxes[0].set_title('Original Image')\n\n# Display the second image\naxes[1].imshow(result_img)\naxes[1].axis('off')  # Hide the axes\naxes[1].set_title('Result Image')\n\n# Show the images\nplt.tight_layout()\nplt.show()\n```\n:::\n\n\n## Summary \n\\\n\n- Neural networks are a flexible class of models.\n  - They are particular powerful for structured input like images, videos, audio, etc.\n  - They can be challenging to train and often require significant computational resources.\n- The good news is we can use pre-trained neural networks.\n  - This saves us a huge amount of time/cost/effort/resources.\n  - We can use these pre-trained networks directly or use them as feature transformers. \n\n## Thank you! \n\n- That's it for the module! Now, let's work on the hands on exercises. \n"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","output-file":"slides-03-deep-learning.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.5.57","auto-stretch":true,"editor":{"render-on-save":true},"publish":{"gh-pages":{"name":"gh-pages","branch":"main","path":"website"}},"title":"Deep Learning","smaller":true,"center":true}}},"projectFormats":["html"]}